---
- name: Build and Deploy SGPT AI chat on Docker
  hosts: lsrv-01
  become: true  # Run tasks with sudo privileges

  vars:
    dest_docker_path: /opt/my-sgpt
    dockerfie: ./dockerfile/my-sgpt/Dockerfile
    dockercomposefie: ./dockerfile/my-sgpt/compose.yaml
    container_name: "my-sgpt"
    container_tag: "v1"
    compose_container_name: "my-sgpt-1"
    #SGPT_API_TOKEN: ${{ secrets.SGPT_API_TOKEN }}

  tasks:
  - name: Show me a token?
    ansible.builtin.debug:
      msg: "{{ SGPT_API_TOKEN }}"

  - name: Update Ubuntu system
    include_tasks: "{{ playbook_dir }}/jobs/ubuntu-update.yaml"
    when: ansible_distribution == 'Ubuntu'

  - name: Install docker on Ubuntu
    include_tasks: "{{ playbook_dir }}/jobs/ubuntu-docker-install.yaml"
    when: ansible_distribution == 'Ubuntu'

  - name: Copy docker files to destination
    include_tasks: "{{ playbook_dir }}/jobs/ubuntu-sgpt-copy-files.yaml"
    when: ansible_distribution == 'Ubuntu'

  - name: Remove container and image if source/configuration files changed
    include_tasks: "{{ playbook_dir }}/jobs/ubuntu-docker-remove-container_and_image.yaml"
    when: docker_changed.changed or compose_changed.changed

#=== Build image and compose up docker
  - name: build the image
    community.docker.docker_image:
      name: "{{ container_name }}"
      tag: "{{ container_tag }}"
      build:
        path: "{{ dest_docker_path }}"
        args:
          OPENAI_API_KEY: "{{ SGPT_API_TOKEN }}"
      source: build

  - name: Create and start docker compose
    community.docker.docker_compose_v2:
      project_src: "{{ dest_docker_path }}"
    register: output

  #=== Docker container info ====
  - name: Get infos on container
    community.docker.docker_container_info:
      name: "{{ compose_container_name }}"
    register: result

  - name: Does container exist?
    ansible.builtin.debug:
      msg: "The container {{ 'exists' if result.exists else 'does not exist' }}"

  - name: Print information about container
    ansible.builtin.debug:
      var: result.container
    when: result.exists
